plot_edges.py 

#this code should be run after cpm is run, so all masks refers to df generated by cpm code

#load in coordination matrix
shen268_coords = pd.read_csv("shen268_coords.csv", index_col="NodeNo")
print(shen268_coords.shape)
shen268_coords.head()



def plot_consistent_edges(all_masks, tail, thresh = 1.0, color='gray'):
    
    edge_frac = (all_masks[tail].sum(axis=0))/(all_masks[tail].shape[0])
    print("For the {} tail, {} edges were selected in at least {}% of folds".format(tail, (edge_frac>=thresh).sum(), thresh*100))
    edge_frac_square = sp.spatial.distance.squareform(edge_frac)

    nodes = edge_frac_square >= thresh


    node_mask = np.amax(edge_frac_square, axis=0) >= thresh # find nodes that have at least one edge that passes the threshold
    node_size = edge_frac_square.sum(axis=0)*node_mask*20 # size nodes based on how many suprathreshold edges they have

    plot_connectome(adjacency_matrix=edge_frac_square, edge_threshold=thresh,
                    node_color = color,
                    node_coords=shen268_coords, node_size=node_size,
                    display_mode= 'lzry',
                    edge_kwargs={"linewidth": 1, 'color': color})


    return edge_frac_square



plot_consistent_edges(all_masks, "pos", thresh = .8, color = 'red')
plot_consistent_edges(all_masks, "neg", thresh = .8, color = 'blue')
